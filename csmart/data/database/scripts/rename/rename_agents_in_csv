#!/usr/bin/perl

# <copyright>
#  
#  Copyright 2004 BBNT Solutions, LLC
#  under sponsorship of the Defense Advanced Research Projects
#  Agency (DARPA).
# 
#  You can redistribute this software and/or modify it under the
#  terms of the Cougaar Open Source License as published on the
#  Cougaar Open Source Website (www.cougaar.org).
# 
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#  
# </copyright>


#
# Read a CSV file with the new agent names:
#   IGNORE, OLD_NAME, NEW_NAME_PREFIX, NEW_NAME_SUFFIX, ...
# Create a map of (OLD_NAME -> NEW_NAME)
#
# Read the first line of the CSV for header columns.
# Agent names are in columns with names that are in the
# "%name_headers" map.
#
# Fix the remainder of the CSV file to replace the names in the
# above columns with the new agent names.
#

my %name_headers = (
# relationships
 "ORG_ID" => "1",
 "ORG_NAME" => "1",
 "COMPONENT_ID" => "1",
 "SUPPORTING_ORG_ID" => "1",
 "SUPPORTED_ORG_ID" => "1",
 "SUPERIOR_ORG_ID" => "1",
# csmart
 "AGENT_LIB_NAME" => "1",
 "COMPONENT_ALIB_ID" => "1",
 "COMPONENT_NAME" => "1",
 "COMPONENT_LIB_ID" => "1",
 "ENTITY_ID" => "1",
# "ORG_GROUP_ID" => "1",
 "PG_ATTRIBUTE_LIB_ID" => "1",
);

my $table_file;
my $csv_file;

my $verbose=0;
my $print_table=0;

my %table;

parse_args();
if (!defined($csv_file)) {
  usage();
  exit(1);
}
read_table();
if ($print_table) {
  print "<!-- table: \n";
  foreach (sort (keys %table)) {
    print "($_, $table{$_})\n";
  }
  print "-->\n";
}
fix_csv();
exit(0);

sub usage {
  print STDERR <<EOF;
Usage: $0 [OPTION] RENAME_TABLE XML_FILE
Rename the agents in Cougaar CSV configuration file.

Options:

 --print_table   print the rename table
 --verbose       print verbose STDERR logging
 --help          display usage

The file specified by the RENAME_TABLE should be a CSV
file with lines in the following format:
  IGNORE, OLD_NAME, NEW_NAME_PREFIX, NEW_NAME_SUFFIX, ...
For example, this line from the "org_hierarchy.csv" file:
   1,NCA,OSD,GOV,etc
which would rename "NCA" to "OSD.GOV".

The CSV file should start with a "headers" line, which
specifies the column names.  Columns with the following
names indicate agent names:
EOF
  my $first_header;
  foreach (sort (keys %name_headers)) {
    if (!(defined($first_header))) {
      $first_header = $_;
    }
    print "    $_\n";
  }
print STDERR <<EOF;
For example, this short example:
  FOO, BAR, $first_header, BAZ
  x, y, NCA, z
  1, 2, AgentX, 3

The above example rename table and csv file would generate
this standard-output:
  FOO, BAR, $first_header, BAZ
  x, y, OSD.GOV, z
  1, 2, AgentX, 3

Report bugs to http://www.cougaar.org/bugs
EOF
  exit(1);
}

sub parse_args {
  foreach (@args = @ARGV) {
    chomp;
    my $arg = $_;
    if (/^-+(.*)/) {
      $arg = $1;
      if ($arg eq "print_table") {
        $print_table=1;
      } elsif ($arg eq "verbose") {
        $verbose=1;
      } elsif ($arg eq "help") {
        usage();
      }
    } elsif (!defined($table_file)) {
      $table_file = $arg;
    } elsif (!defined($csv_file)) {
      $csv_file = $arg;
    } else {
      usage();
    }
  }
}

sub read_table {
  my $filename = $table_file;
  open(FD, "<$filename")
    or die "Unable to open $filename: $!\n";
  my $first_line=1;
  while (<FD>) {
    chomp;
    my $line = $_;
    if ($line =~ /^\s*#/) {
      # ignore comments
    } else {
      @cols = split(/\s*,\s*/, $line);
      if ($first_line) {
        $first_line=0;
        if ("org_order" eq $cols[0] &&
            "orig_org_id" eq $cols[1] &&
            "base_org_id" eq $cols[2] &&
            "suffix" eq $cols[3]) {
          # good
          if ($verbose) {
            print STDERR "VALID HEADERS: $line\n";
          }
        } else { 
          print "Unexpected first line of file $filename:\n";
          print $line;
          print "Expecting a CSV header:\n";
          print "order,orig_org_id,base_org_id,suffix\n";
          close FD;
          exit(1);
        }
      } else {
        my $orig_name=$cols[1];
        my $new_name=$cols[2];
        if (defined($cols[3])) {
          $new_name="$new_name.$cols[3]";
        }
        if ($verbose) { 
          print STDERR "TABLE ($orig_name, $new_name)\n";
        }
        $table{$orig_name}=$new_name;
      }
    }
  }
  close FD;
}

sub fix_csv {
  my $filename = $csv_file;
  open(FD, "<$filename")
    or die "Unable to open $filename: $!\n";
  my $first_line=1;
  my $any_name_cols=0;
  my $hack_index=-1;
  my @name_cols;
  while (<FD>) {
    chomp;
    my $line = $_;
    if ($line =~ /^\s*#/) {
      # ignore comments
      print "$line\n";
    } else {
      @cols = split(/\s*,\s*/, $line);
      if ($first_line) {
        $first_line=0;
        foreach $col (@cols) {
          $col =~ tr/a-z/A-Z/;
          if ($verbose) {
            print STDERR "col[$#name_cols]=($col)\n";
          }
          my $isName = defined($name_headers{$col});
          if (!$isName &&
              $col eq "ATTRIBUTE_VALUE" &&
              ($filename =~ /cfw_org_pg_attr.csv$/ ||
               $filename =~ /org_pg_attr.csv$/ ||
               $filename =~ /community_attribute.csv$/)) {
            # HACK!
            print STDERR "  Warning: Enabling custom ClusterPG/ItemId/Community handling\n";
            $hack_index=$#name_cols+1;
            $isName=1;
          }
          if ($isName) {
            $any_name_cols=1;
          }
          push(@name_cols, $isName);
        }
        print "$line\n";
      } elsif (!$any_name_cols) {
        print "$line\n";
      } else {
        my $i=0;
        foreach $col (@cols) {
          my $isQuoted = $col =~ /^\"/;
          if ($isQuoted) {
            $col =~ s/^\"//;
            $col =~ s/\"$//;
          }
          if ($name_cols[$i]) {
            my $new_name=$table{$col};
#            print STDERR "col[$i]: $col\n";
            if (defined($new_name)) {
              if ($i != $hack_index) {
                # typical case
                $col=$new_name;
              } else {
                $prev_col = $cols[$i-1];
                if ($prev_col eq "ClusterPG|MessageAddress" ||
                    $prev_col eq "ItemIdentificationPG|ItemIdentification" ||
                    $prev_col eq "CommunityManager") {
                  if ($VERBOSE) {
                    print STDERR "Replace $prev_col\n";
                  }
                  $col=$new_name;
                }
              }
            }
          }
          if ($i > 0) {
            print ",";
          }
          if ($isQuoted) {
            print "\"";
          }
          print "$col";
          if ($isQuoted) {
            print "\"";
          }
          ++$i;
        }
        while ($i < $#name_cols) {
          print ",";
          ++$i;
        }
        if ($line =~ /\,\s*/) {
          print ",";
        }
        print "\n";
      }
    }
  }
  close FD;
}
