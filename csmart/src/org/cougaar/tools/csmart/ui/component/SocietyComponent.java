/*
 * <copyright>
 * This software is to be used only in accordance with the COUGAAR license
 * agreement. The license agreement and other information can be found at
 * http://www.cougaar.org
 *
 * © Copyright 2000, 2001 BBNT Solutions LLC
 * </copyright>
 */

package org.cougaar.tools.csmart.ui.component;

import java.io.File;
import java.io.FileFilter;
import java.net.URL;

import org.cougaar.tools.csmart.ui.viewer.Organizer;
import org.cougaar.tools.server.ConfigurationWriter;

/**
 * The interface for adding and removing nodes from a society.
 */

public interface SocietyComponent extends ModifiableComponent, ComponentProperties {

  void setName(String newName);

  String getSocietyName();

  /**
   * Get the agents, both assigned and unassigned.
   * @return array of agent components
   */

  AgentComponent[] getAgents();

  /**
   * Get Society description
   **/
  URL getDescription();

  /**
   * Returns whether or not the society can be edited.
   * @return true if society can be edited and false otherwise
   */

  public boolean isEditable();

  /**
   * Set by the experiment controller to indicate that the
   * society is running.
   * The society is running from the moment that any node
   * is successfully created 
   * (via org.cougaar.tools.server.CommunityServesClient.createNode)
   * until all nodes are terminated (aborted, self terminated, or
   * manually terminated).
   * @param flag indicating whether or not the society is running
   */

  public void setRunning(boolean isRunning);

  /**
   * Returns whether or not the society is running, 
   * i.e. can be dynamically monitored.
   * Running societies are not editable, but they can be copied,
   * and the copy can be edited.
   * @return true if society is running and false otherwise
   */

  public boolean isRunning();

  /**
   * Return a deep copy of the society.
   * @return society component created
   */

  public SocietyComponent copy(Organizer organizer, Object context);

  /**
   * Return a file filter which can be used to fetch
   * the metrics files for this experiment.
   * @return file filter to get metrics files for this experiment
   */

  public FileFilter getMetricsFileFilter();

  /**
   * Return a file filter which can be used to delete
   * the files generated by this experiment.
   * @return file filter for cleanup
   */

  public FileFilter getCleanupFileFilter();

  /**
   * Returns whether the society is self terminating or must
   * be manually terminated.
   * Self terminating nodes cause a NODE_DESTROYED event
   * to be generated (see org.cougaar.tools.server.NodeEvent).
   * @return true if society is self terminating
   * @see org.cougaar.tools.server.NodeEvent
   */
  public boolean isSelfTerminating();

  /**
   * Get a configuration writer for this society.
   * @param nodes the <code>NodeComponent[]</code> of the full experiment
   * @param nodeFileAddition a <code>String</code> to add Services to every Node file
   * @return a <code>ConfigurationWriter</code> to write out all config data for this society
   */
  public ConfigurationWriter getConfigurationWriter(NodeComponent[] nodes, String nodeFileAddition);
}
