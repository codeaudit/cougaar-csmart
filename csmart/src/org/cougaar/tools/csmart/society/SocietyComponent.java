/*
 * <copyright>
 *  
 *  Copyright 2000-2004 BBNT Solutions, LLC
 *  under sponsorship of the Defense Advanced Research Projects
 *  Agency (DARPA).
 * 
 *  You can redistribute this software and/or modify it under the
 *  terms of the Cougaar Open Source License as published on the
 *  Cougaar Open Source Website (www.cougaar.org).
 * 
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *  
 * </copyright>
 */
package org.cougaar.tools.csmart.society;

import org.cougaar.tools.csmart.core.property.ModifiableComponent;

import java.io.FileFilter;
import java.net.URL;

/**
 * The interface for adding and removing nodes from a society.
 */
public interface SocietyComponent extends ModifiableComponent {

  void setName(String newName);

  /**
   * Get the name of the society.
   * @return the name of the society
   */
  String getSocietyName();

  /**
   * Get the agents, both assigned and unassigned.
   * @return array of agent components
   */
  AgentComponent[] getAgents();

  /**
   * Returns the description of this society
   *
   * @return an <code>URL</code> value
   */
  URL getDescription();

  /**
   * Set by the experiment controller to indicate that the
   * society is running.
   * The society is running from the moment that any node
   * is successfully created 
   * (via the app-server's "create" method)
   * until all nodes are terminated (aborted, self terminated, or
   * manually terminated).
   * @param isRunning flag indicating whether or not the society is running
   */
  void setRunning(boolean isRunning);

  /**
   * Returns whether or not the society is running, 
   * i.e. can be dynamically monitored. 
   * Running societies are not editable, but they can be copied,
   * and the copy can be edited.
   * @return true if society is running and false otherwise
   */
  boolean isRunning();

  /**
   * Return a file filter which can be used to fetch
   * the metrics files for this experiment. 
   * @return <code>FileFilter</code> to get metrics files for this experiment
   */
  FileFilter getResultFileFilter();

  /**
   * Return a file filter which can be used to delete
   * the files generated by this experiment.
   * @return <code>FileFilter</code> for cleanup
   */
  FileFilter getCleanupFileFilter();

  /**
   * Returns whether the society is self terminating or must
   * be manually terminated.
   * Self terminating nodes cause the app-server to send back
   * a "process-destroyed" message when the node terminates.
   * @return true if society is self terminating
   */
  boolean isSelfTerminating();

  /**
   * Save this society to the database. Only to be used
   * after creating a new society. Not to be used from DB societies
   * which are already in the database.
   *
   * @return a <code>boolean</code>, false on error
   */
  boolean saveToDatabase();

  /**
   * Copy this Society and save the copy to the database, under
   * the given new name. If the save fails, the new society
   * will be marked modified when this method returns
   *
   * @param name a <code>String</code> new society name
   * @return a <code>ModifiableComponent</code> new society
   */
  ModifiableComponent copyAndSave(String name);

//    /**
//     * Set the assembly id for this Society.
//     * @param assemblyId the assembly id for this Society
//     */
//    void setAssemblyId(String assemblyId);

  /**
   * Get the assembly id for this Society.
   * @return a <code>String</code> which is the assembly id for this Society
   */
  String getAssemblyId();

  /**
   * Has this society been modified, such that a save would do something.
   *
   * @return a <code>boolean</code>, false if no save necessary
   */
  boolean isModified();
}
